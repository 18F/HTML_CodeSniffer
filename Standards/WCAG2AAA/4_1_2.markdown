---
title: Success Criterion 4.1.2: Name, Role, Value
layout: default
---

# Success Criterion 4.1.2: Name, Role, Value

- **Applies to**: <abbr title="Single A">A</abbr>, <abbr title="Double A">AA</abbr>, <abbr title="Triple A">AAA</abbr>.

## Definition

For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies.

*Note:* This success criterion is primarily for Web authors who develop or script their own user interface components. For example, standard HTML controls already meet this success criterion when used according to specification.

The full ["understanding" page for Success Criterion 4.1.2](http://www.w3.org/TR/UNDERSTANDING-WCAG20/ensure-compat-rsv.html) is available from the W3C.

#### About Accessibility APIs

This goal often speaks of exposing certain data to an "accessibility <acronym title="Application Programming Interface">API</acronym>". Nominally speaking, this translates UI components to a set of data (such as role, name, value, state, available actions, etc) that can be communicated to a user via assistive technology such as a screen reader.

For HTML, the browser usually communicates with an OS-level accessibility API, which then exposes information to assistive technology. For a list of accessibility APIs in common use, the [HTML to Platform Accessibility APIs Implementation Guide](http://dev.w3.org/html5/html-api-map/), covering HTML 4 and 5, is a good start. This is not limited to HTML; other technologies such as Java and (presumably) Flash have techniques that expose their interfaces to accessibility APIs.

Using [technique H91](#tech-h91) successfully ensures that ordinary HTML form controls and links are accessible. If you are creating custom controls and widgets, it may not be so easy to expose such controls to - for instance, that a two-state on/off toggle button (like that found in Squiz Framework, or the iOS interface) has the role of a check box, and should be exposed to assistive technology as such. The [<acronym title="Web Accessibility Intiative: Accessible Rich Internet Applications">WAI-ARIA</acronym> document](http://www.w3.org/TR/wai-aria) attempts to address this, but this is only at Candidate Recommendation stage, pending further implementation.

## Techniques tested

### Table of contents

- [H91: Using HTML form controls and links](#tech-h91)

#### Relevant techniques tested in other Success Criteria

- [H44: Using label elements to associate text labels with form controls (tested in SC 1.3.1)](./1_3_1#tech-h44)

### <a id="tech-h91">H91: Using HTML form controls and links</a>

[Detailed information about technique H91](http://www.w3.org/TR/2010/NOTE-WCAG20-TECHS-20101014/H91) is available from the W3C.

#### Testing

> 1. Inspect the HTML source code.
> 2. For each instance of links and form elements, check that the name, value, and state are specified as indicated in the table above.

*Note:* The "table above" is a table found in the [detailed information about technique H91](http://www.w3.org/TR/2010/NOTE-WCAG20-TECHS-20101014/H91).

The testing performed by HTML_CodeSniffer is to ensure that each applicable element contains one item of content that can count as its "Name" and one as its "Value", according to the table in the above document. This can be an attribute, the contents of the element, or something else again - for instance, the label element as a control name, or a select list's value being the value of the relevant "selected option".

#### Errors

Errors occur when no item of data can be found that can represent a control or link's "Name" or "Value". For instance:

1.  Fails because: a name is not provided for the text box. A name can be provided using either a label element, or through the title attribute. (Note that the empty value is not a problem here - although an error would be raised if the value attribute were omitted.)

    Example:

        <p>
            <input type="text" id="textBox" value="" />
        </p>

2.  Fails because: a value is not provided for the select list. One should be marked with the "selected" attribute to provide a value.

    Example:

        <p>
            <label for="selectList">Select one:</label>
            <select id="selectList">
                <option value="1">Option One</option>
                <option value="2">Option Two</option>
            </select>
        </p>
