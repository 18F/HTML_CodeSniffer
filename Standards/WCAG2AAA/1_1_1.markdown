---
title: Success Criterion 1.1.1: Non-Text Content
category: Tested Techniques
layout: default
---

# Success Criterion 1.1.1: Non-Text Content

- **Applies to**: <abbr title="Single A">A</abbr>, <abbr title="Double A">AA</abbr>, <abbr title="Triple A">AAA</abbr>.

## Definition

All non-text content that is presented to the user has a text alternative that serves the equivalent purpose, except for the situations listed below.

- *Controls, Input:* If non-text content is a control or accepts user input, then it has a name that describes its purpose. (Refer to Guideline 4.1 for additional requirements for controls and content that accepts user input.)
- *Time-Based Media:* If non-text content is time-based media, then text alternatives at least provide descriptive identification of the non-text content. (Refer to Guideline 1.2 for additional requirements for media.)
- *Test:* If non-text content is a test or exercise that would be invalid if presented in text, then text alternatives at least provide descriptive identification of the non-text content.
- *Sensory:* If non-text content is primarily intended to create a specific sensory experience, then text alternatives at least provide descriptive identification of the non-text content.
- *CAPTCHA:* If the purpose of non-text content is to confirm that content is being accessed by a person rather than a computer, then text alternatives that identify and describe the purpose of the non-text content are provided, and alternative forms of CAPTCHA using output modes for different types of sensory perception are provided to accommodate different disabilities.
- *Decoration, Formatting, Invisible:* If non-text content is pure decoration, is used only for visual formatting, or is not presented to users, then it is implemented in a way that it can be ignored by assistive technology.

"Non-text content" is defined as

> any content that is not a sequence of characters that can be programmatically determined or where the sequence is not expressing something in human language
> *Note:* This includes ASCII Art..., emoticons, leetspeak..., and images representing text

The full ["understanding" page for Success Criterion 1.1.1](http://www.w3.org/TR/UNDERSTANDING-WCAG20/text-equiv-all.html) is available from the W3C.

## Techniques tested

### Table of contents

- [H2: Combining adjacent image and text links for the same resource](#tech-h2)
- [H24: Providing text alternatives for the area elements of image maps](#tech-h24)
- [H36: Using alt attributes on images used as submit buttons](#tech-h36)
- [H37: Using alt attributes on img elements](#tech-h37)
- [H67: Using null alt text and no title attribute on img elements for images that <acronym title="Assistive Technology">AT</acronym> should ignore](#tech-h67)
- [G94: Providing short text alternative for non-text content that serves the same purpose and presents the same information as the non-text content](#tech-g94)

### <a id="tech-h2">H2: Combining adjacent image and text links for the same resource</a>

[Technique H2](http://www.w3.org/TR/2010/NOTE-WCAG20-TECHS-20101014/H2) refers both to combined image-and-text links, and links contained in adjacent cells in a table. Only the first is currently implemented.

When a link containing an img element and text need to be created, the best practice is to put them together in one link (rather than two). The img element should only contain text if it provides information the text does not provide; otherwise the alt text should remain blank.

If the image's text alternative duplicates the link text, the concern is that:

- They appear to assistive technology as two separate and identical links, even though they do not appear that way visually, or
- If the links are combined but alt text remains, assistive technology would "stutter" in that it would read the text description of the link twice.

#### Testing

> For each a in the content that contains an img element:
>
> 1. Check that there is no adjacent a element that has the same href attribute and the same description.

HTML\_CodeSniffer bases its tests on the "Failure Examples" provided in the technique (which are similar to those provided below), rather than the test, for specific examples of how this test can be failed. The above test describes Failure example 3, however there are other failure examples based on how this technique can be *incorrectly* applied:

- The alt text is removed from the img element while not combining the links, causing the element with the image to contain no descriptive text at all (Failure example 4);
- The text links are combined without removing alt text from the image (Failure example 5).

HTML\_CodeSniffer judges links to be "adjacent" if the "a" tags are directly next to each other, or are separated by only whitespace.

#### Examples

1.  Successful usage of the technique where the image does not provide any further detail to the purpose of the link than the link text itself. In this example, the image describes HTML\_CodeSniffer, which is already described in the link text. Therefore the image should be ignored by assistive technology.

    Example:

        <a href="htmlcs.html">
            <img src="htmlcs.png" alt="" />
            HTML_CodeSniffer
        </a>

2.  Successful usage of the technique, where the image adds additional meaning to the link. In this example, the image is an icon indicating the link leads to a PDF file - this needs alt text to describe its purpose.

    Example:

        <a href="htmlcs.pdf">
            HTML_CodeSniffer documentation
            <img src="pdf.png" alt="(as a PDF)" />
        </a>

#### Errors

1.  Fails because: the text equivalent of both the links are the same. They may appear to be visually distinct links, but to a screen reader, they are identical. (Corresponds to "Failure Example 3" in W3C documentation.)

    Example:

        <a href="htmlcs.html">
            <img src="htmlcs.png" alt="HTML_CodeSniffer" />
        </a>
        <a href="htmlcs.html">
            HTML_CodeSniffer
        </a>

2.  Fails because: the technique has been applied incorrectly. Although the duplication of link text has been avoided, a link is now without any text alternative. (Corresponds to "Failure Example 4" in W3C documentation.)

        <a href="htmlcs.html">
            <img src="htmlcs.png" alt="" />
        </a>
        <a href="htmlcs.html">
            HTML_CodeSniffer
        </a>

3.  Fails because: the technique has been applied incorrectly. The links have been combined into one, but the alt text has not been removed. It would be read as "HTML\_CodeSniffer HTML\_CodeSniffer" by a screen reader, which is problematic and confusing. (Corresponds to "Failure Example 5" in W3C documentation.)

    Example:

        <a href="htmlcs.html">
            <img src="htmlcs.png" alt="HTML_CodeSniffer" />
            HTML_CodeSniffer
        </a>

### <a id="tech-h24">H24: Providing text alternatives for the area elements of image maps</a>

Image maps split the visual space of an image into a number of clickable links. Image maps can be implemented *client-side* (inside the HTML document) or *server-side* (coordinates sent as a query string to a script). The former should be used wherever possible: server-side image maps are not accessible on their own, because the clickable areas implemented are not discernable at the client side, and are certainly not accessible with a keyboard.

In a client-side image map, an img element is wedded to a map of clickable areas, generally using the area element. Each area should contain alt text that should display as part of a text alternative to the map when images are disabled. If the alt text is missing or empty, it's like having an "a" element without link text: nothing explains the purpose of the clickable area.

It is also recommended that each area element contain a title attribute, because browsers do not show the alt text for the area when images are enabled - particularly if its function is ambiguous from the image alone.

#### Testing

> For each area element in an image map:
>
> 1. Check that the area element has an alt attribute.
> 2. Check that the text alternative specified by the alt attribute serves the same purpose as the part of image map image referenced by the area element of the imagemap.

#### Examples

1.  Area contains an appropriately filled alt attribute. (Will emit a notice to flag that this alt text should correctly reflect the purpose of the area being mapped.)

    Example:

        <map name="TestMap">
            <area shape="rect" coords="0,0,100,100" href="htmlcs.html" alt="HTML_CodeSniffer Downloads" />
        </map>

#### Errors

1.  Fails because an area element is provided without an alt attribute.

    Example:

        <map name="TestMap">
            <area shape="rect" coords="0,0,100,100" href="htmlcs.html" />
        </map>

1.  Fails because an area element is provided with an alt attribute which is empty or entirely consists of whitespace.

    Example:

        <map name="TestMap">
            <area shape="rect" coords="0,0,100,100" href="htmlcs.html" alt="" />
        </map>

### <a id="tech-h36">H36: Using alt attributes on images used as submit buttons</a>

Applies to input elements with a type of "image". These are "image submit buttons", where an image replaces the usual submit button. These should have alt text relating to their function: a plain-text alternative to an image containing text, or an alternative defining their purpose otherwise. (For instance, if a submit button is a right arrow meaning "Next", the alt text should be "Next", not "right arrow image" for instance).

As submit buttons always have a purpose and function, using technique [H67](#tech-h67) by specifying empty alt text is not allowed as this would prevent submission of the form.

Where the alt text is valid, a notice reminding testers to ensure the alt text is appropriate for the submit button (technique [G94](#tech-g94)) will be emitted.

#### Testing

> 1. For all input elements that have a type attribute value of "image", check for the presence of an alt attribute.
> 2. Check that the alt attribute indicates the button's function.

Both of the above items must pass for this sufficient technique to pass.

#### Examples

1.  Successful usage. The alt text should reflect the purpose of the submission action, including any important words on the image (see technique [G94](#tech-g94)).

    Example:

    	<input type="image" src="submit.png" alt="Submit Form" /> 

#### Errors

1.  Fails because: no alt attribute is provided.

    Example:

    	<input type="image" src="submit.png" />

2.  Fails because: the alt text is empty.

    Example:

    	<input type="image" src="submit.png" alt="" />

3.  Fails because: once whitespace is trimmed, the alt text is empty.

	Example:

    	<input type="image" src="submit.png" alt="   " />

#### Cases for manual failure

1.  Submit button described as a "big red button". No error will be thrown as the alt text is present, but the notice for appropriate alt text will be emitted. This does not describe the function of the button, and thus should be failed manually.

    In any case, this description would potentially also fail Success Criteria 1.3.3 (Sensory Characteristics) and 1.4.1 (Use of Colour), both at <abbr title="Single A">A</abbr> level, because references are made to its size and colour that are useless to blind users.

    Example:
    
    	<input type="image" src="submit.png" alt="big red button" />

### <a id="tech-h37">H37: Using alt attributes on img elements</a>

The purpose of this technique is best described by the first line of the technique's description:

> When using the img element, specify a short text alternative with the alt attribute. *Note:* The value of this attribute is referred to as "alt text".

If the image contains words, those words should form part of the alt text, so users who cannot see the image don't miss anything.

In all cases, the intent is that the alt text should convey the same **meaning** as the image. A description of the visual characteristics is not a good idea if that is not the main expression conveyed by the image (for instance, it would not work well with a chart).

#### Testing

> 1. Examine each img element in the content
> 2. Check that each img element which conveys meaning contains an alt attribute.
> 3. If the image contains words that are important to understanding the content, the words are included in the text alternative.

Items 2 and 3 must pass for the technique to pass.

HTML\_CodeSniffer will throw an error if an alt attribute is missing from an image.

Where the alt text is valid, a notice reminding testers to ensure the alt text is appropriate for the image (technique [G94](#tech-g94)) will be emitted.

#### Examples

1.  Example of an image being used for a button containing a newspaper icon and an
    invitation to subscribe to a site's newsletter.

    Example:
    
    	<img src="subscribe.png" alt="Subscribe to our newsletter" />

#### Errors

1.	Fails because: no alt attribute is provided.

	Example:

		<img src="subscribe.png" />
		
#### Cases for manual failure

1.  Img elements can be manually failed on testing item 3, if important words in the image aren't part of the alt text.

2.  Images can be manually failed on other grounds. For instance, a non-decorative image with empty alt text (see technique [H67](#tech-h67)), or the alt text not describing the image properly (see technique [G94](#tech-g94)). These examples are not provided here.
		
### <a id="tech-h67">H67: Using null alt text and no title attribute on img elements for images that <acronym title="assistive technology">AT</acronym> should ignore</a>

WCAG 2.0 allows for images without a function and purpose - referred to as "purely decorative" - to be marked with an empty alt attribute, **and** an empty or absent title attribute.

Omitting the alt attribute completely is an error (under technique [H37](#tech-h37)). Leaving that attribute out makes interpretation undefined to assistive technology. It may treat the image as blank, but it may also do other things, such as using the file name as the text alternative. It is required that this not be left to chance, by providing an alt attribute that is blank.

#### Testing

> For each image that should be ignored:
>
> 1. Check that title attribute is either absent or empty.
> 2. Check that alt attribute is present and empty or contains only whitespace (but not &amp;nbsp;)

Both items have to pass for an image to be considered successfully ignored.

If an image is marked as ignored, a warning is emitted to that effect.

#### Examples

All valid examples of ignored images should emit a **warning** stating that the image is ignored by assistive technology.

1.  Completely empty alt text, and no title attribute.

	Example:

    	<img src="htmlcs.png" alt="" />

1.  Completely empty alt text, title attribute also empty.

    Example:
    
        <img src="htmlcs.png" alt="" title="" />

1.  Alt text is only whitespace.

	Example:
    
		<img src="htmlcs.png" alt="   " />
    
#### Errors

1.  Fails because: an image that should be ignored (due to no alt text) should not contain a title attribute.

	Example:

    	<img src="htmlcs.png" alt="" title="Non-empty title" />

#### Non-examples 

These examples should not trigger anything from this test.

1.  Non-breaking spaces should not be treated as "empty." This is a rather artificial example and of course would break the rule of alt texts being descriptive.

	Example:

    	<img src="htmlcs.png" alt="&nbsp;" />

    > This currently does not throw anything different to example 1, because it uses "<abbr title="backslash-s">\s</abbr>" as the space character wildcard. The ECMAScript includes <acronym title="non-breaking space">NBSP</acronym> as part of "<abbr title="backslash-s">\s</abbr>", which doesn't fulfil example 5.
    >	
	> If the alt text contains only <acronym title="non-breaking spaces">NBSPs</acronym> (and other whitespace), this should probably be an error, as the intention is likely that the image will be ignored by assistive technology, but the WCAG 2.0 test suggests it should not be.

### <a id="tech-g94">G94: Providing short text alternative for non-text content that serves the same purpose and presents the same information as the non-text content</a>

This is a general catch-all technique that is implemented in certain ways, such as techniques [H37](#tech-h37), [H36](#tech-h36), etc.

HTML\_CodeSniffer emits a notice for technique G94 where alt text is validly used (and not null) for non-text content, to warn the user that even if there is a text alternative, it must still match the non-text content in its purpose. This can be an issue if the non-text content is updated but the text alternative is not updated at the same time.

#### Testing

> 1. Remove, hide, or mask the non-text content
> 2. Replace it with the text alternative
> 3. Check that nothing is lost (the purpose of the non-text content is met by the text alternative)
> 4. If the non-text content contains words that are important to understanding the content, the words are included in the text alternative

To pass, item 3 must pass, and also item 4 if it applies to that item of non-text content.
